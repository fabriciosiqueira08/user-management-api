service: user-management-api

frameworkVersion: "3"

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  environment:
    USERS_TABLE: ${env:USERS_TABLE}
    USER_POOL_ID: ${env:USER_POOL_ID}
    USER_POOL_CLIENT_ID: ${env:USER_POOL_CLIENT_ID}
    SERVICE_NAME: ${self:service}
    STAGE: ${sls:stage}
    FRONTEND_URL: ${env:FRONTEND_URL}
    SENDER_EMAIL: ${env:SENDER_EMAIL}
  iam:
    role:
      statements:
        # Permissões DynamoDB
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${env:USERS_TABLE}

        # Permissões Cognito
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminGetUser
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminDeleteUser
            - cognito-idp:ListUsers
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminRespondToAuthChallenge
            - cognito-idp:GlobalSignOut
            - cognito-idp:AdminAddUserToGroup
            - cognito-idp:CreateGroup
            - cognito-idp:ListGroups
          Resource: arn:aws:cognito-idp:${self:provider.region}:*:userpool/${env:USER_POOL_ID}

        # Permissões SES
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
          Resource: "*"

        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - arn:aws:secretsmanager:${self:provider.region}:*:secret:${self:service}/${sls:stage}/*

        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${sls:stage}-ratelimit

package:
  individually: true
  patterns:
    - "!**"
    - "src/**/*.ts"
    - "!src/**/*.test.ts"
    - "!src/**/*.spec.ts"
    - "!test/**"
    - "!jest.config.js"
    - "!.eslintrc"
    - "!.prettierrc"
    - "!tsconfig.json"
    - "!README.md"

custom:
  esbuild:
    bundle: true
    minify: true
    sourcemap: false
    exclude: ["aws-sdk"]
    target: "node18"
    platform: "node"
    concurrency: 10
    watch:
      pattern: "src/**/*.ts"
      ignore: "test/**,**/*.test.ts,**/*.spec.ts"
  dotenv:
    path: .env
    include:
      - USER_POOL_ID
      - USER_POOL_CLIENT_ID
      - USERS_TABLE
      - FRONTEND_URL
      - SENDER_EMAIL
    loadEnv: true
    required:
      env:
        - USER_POOL_ID
        - USER_POOL_CLIENT_ID
        - USERS_TABLE
        - FRONTEND_URL
        - SENDER_EMAIL
    logging: true

functions:
  auth:
    handler: src/handlers/auth.login
    events:
      - http:
          path: /auth/login
          method: post
          cors: true

  refreshToken:
    handler: src/handlers/auth.refreshToken
    events:
      - http:
          path: /auth/refresh-token
          method: post
          cors: true

  logout:
    handler: src/handlers/auth.logoutHandler
    events:
      - http:
          path: /auth/logout
          method: post
          cors: true
          authorizer: aws_iam

  createUser:
    handler: src/handlers/createUser.handler
    events:
      - http:
          path: /users
          method: post
          cors: true

  getUser:
    handler: src/handlers/getUser.handler
    events:
      - http:
          path: /users/{id}
          method: get
          cors: true
          authorizer: aws_iam

  listUsers:
    handler: src/handlers/listUsers.handler
    events:
      - http:
          path: /users
          method: get
          cors: true
          authorizer: aws_iam

  updateUser:
    handler: src/handlers/updateUser.handler
    events:
      - http:
          path: /users/{id}
          method: put
          cors: true
          authorizer: aws_iam

  deleteUser:
    handler: src/handlers/deleteUser.handler
    events:
      - http:
          path: /users/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  makeAdmin:
    handler: src/handlers/makeAdmin.handler
    events:
      - http:
          path: /users/{id}/make-admin
          method: post
          cors: true
          authorizer: aws_iam

  completeRegistration:
    handler: src/handlers/completeRegistration.handler
    events:
      - http:
          path: /auth/complete-registration
          method: post
          cors: true

  verifyOTP:
    handler: src/handlers/auth.verifyOTP
    events:
      - http:
          path: /auth/verify-otp
          method: post
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    OTPTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-otp
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        BillingMode: PAY_PER_REQUEST

    RateLimitTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-ratelimit
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        BillingMode: PAY_PER_REQUEST

  Outputs:
    ApiUrl:
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${sls:stage}"
      Description: URL da API
